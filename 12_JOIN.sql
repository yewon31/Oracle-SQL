SELECT * FROM INFO;
SELECT * FROM AUTH;

-----------------------------------------------------------
-- INNER JOIN
SELECT *
FROM INFO
/*INNER*/ JOIN AUTH
ON INFO.AUTH_ID = AUTH.AUTH_ID;

SELECT INFO.ID,
        INFO.TITLE,
        INFO.CONTENT,
        INFO.AUTH_ID, -- 양측에 다 있는 KEY, 테이블.컬럼명 기입 안하면 오류
        AUTH.NAME
FROM INFO
INNER JOIN AUTH
ON INFO.AUTH_ID = AUTH.AUTH_ID;

-- 테이블 ALIAS
SELECT I.ID,
        I.TITLE,
        I.CONTENT,
        I.AUTH_ID,
        A.NAME
FROM INFO I -- 테이블 엘리어스
INNER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

-- 연결할 키가 같다면 using 구문 사용 가능
SELECT *
FROM INFO I
INNER JOIN AUTH A
USING(AUTH_ID);

-----------------------------------------------------------
-- OUTER JOIN
-- LEFT OUTER JOIN (OUTER생략가능) - 왼쪽테이블이 기준이 되서, 원쪽테이블은 다나옴.
SELECT * FROM INFO I LEFT OUTER JOIN AUTH A ON I.AUTH_ID= A.AUTH_ID;

-- RIGHT OUTER JOIN
SELECT * FROM INFO I RIGHT OUTER JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

-- RIGHT조인의 테이블 자리만 바꿔주면 LEFT JOIN
SELECT * FROM AUTH A RIGHT OUTER JOIN INFO I ON A.AUTH_ID = I.AUTH_ID;

-- FULL OUTER JOIN - 양쪽데이터 누락없이 다 나옴.
SELECT * FROM INFO I FULL OUTER JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

-- CROSS JOIN (잘못된 조인의 형태 - 실제로 쓸일은 없음)
SELECT * FROM INFO I CROSS JOIN AUTH A;
-----------------------------------------------------------
-- SELF JOIN (하나의 테이블을 가지고 조인을 거는것 - 조건 안에 연결 가능한 키 필요)
SELECT * FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES E
LEFT JOIN EMPLOYEES M
ON E.MANAGER_ID = M.EMPLOYEE_ID;
-----------------------------------------------------------
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT * FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E. DEPARTMENT_ID = D. DEPARTMENT_ID;

-- 조인 여러번 가능
SELECT E.EMPLOYEE_ID,
       E.FIRST_NAME,
       D.DEPARTMENT_NAME,
       L.CITY
FROM EMPLOYEES E
LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
WHERE EMPLOYEE_ID >= 150;

-----------------------------------------------------------
--문제 1.
--EMPLOYEES 테이블과, DEPARTMENTS 테이블은 DEPARTMENT_ID로 연결되어 있습니다.
--EMPLOYEES, DEPARTMENTS 테이블을 엘리어스를 이용해서 
--각각 INNER , LEFT OUTER, RIGHT OUTER, FULL OUTER 조인 하세요. (달라지는 행의 개수 확인)
SELECT * FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; //106
SELECT * FROM EMPLOYEES E LEFT OUTER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; //107
SELECT * FROM EMPLOYEES E RIGHT OUTER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; //122
SELECT * FROM EMPLOYEES E FULL OUTER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; //123

--문제 2.
--EMPLOYEES, DEPARTMENTS 테이블을 INNER JOIN하세요
--조건)employee_id가 200인 사람의 이름, department_id를 출력하세요
--조건)이름 컬럼은 first_name과 last_name을 합쳐서 출력합니다
SELECT E.EMPLOYEE_ID, CONCAT(E.FIRST_NAME || ' ', E.LAST_NAME) 이름, E.DEPARTMENT_ID 
FROM EMPLOYEES E 
JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.EMPLOYEE_ID = 200;

--문제 3.
--EMPLOYEES, JOBS테이블을 INNER JOIN하세요
--조건) 모든 사원의 이름과 직무아이디, 직무 타이틀을 출력하고, 이름 기준으로 오름차순 정렬
--HINT) 어떤 컬럼으로 서로 연결되어 있는지 확인
SELECT E.FIRST_NAME 이름, E.JOB_ID, J.JOB_TITLE 
FROM EMPLOYEES E
JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
ORDER BY 이름;

--문제 4.
--JOBS테이블과 JOB_HISTORY테이블을 LEFT_OUTER JOIN 하세요.
SELECT *
FROM JOBS J
LEFT OUTER JOIN JOB_HISTORY JH
ON JH.JOB_ID = J.JOB_ID;

--문제 5.
--Steven King의 부서명을 출력하세요.
SELECT CONCAT(E.FIRST_NAME || ' ', E.LAST_NAME) 이름, D.DEPARTMENT_NAME 부서명 
    FROM EMPLOYEES E 
    JOIN DEPARTMENTS D 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    WHERE E.FIRST_NAME = 'Steven'
    AND E.LAST_NAME = 'King';

--문제 6.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(Cross join)처리하세요
SELECT *
    FROM EMPLOYEES E 
    CROSS JOIN DEPARTMENTS D;

--문제 7.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고 SA_MAN 사원만의 사원번호, 이름, 
--급여, 부서명, 근무지를 출력하세요. (Alias를 사용)
SELECT E.JOB_ID, E.EMPLOYEE_ID 사원번호, E.FIRST_NAME 이름, E.SALARY 급여, D.DEPARTMENT_NAME 부서명, L.CITY 근무지
    FROM EMPLOYEES E 
    JOIN DEPARTMENTS D 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
    WHERE E.JOB_ID = 'SA_MAN';

--문제 8.
--employees, jobs 테이블을 조인 지정하고 job_title이 'Stock Manager', 'Stock Clerk'인 직원 정보만
--출력하세요.
SELECT E.FIRST_NAME 이름, E.JOB_ID, J.JOB_TITLE 
FROM EMPLOYEES E
JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE J.JOB_TITLE IN ('Stock Manager','Stock Clerk');

--문제 9.
--departments 테이블에서 직원이 없는 부서를 찾아 출력하세요. LEFT OUTER JOIN 사용
SELECT D.DEPARTMENT_NAME
FROM DEPARTMENTS D
LEFT OUTER JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE E.EMPLOYEE_ID IS NULL;

--문제 10. 
--join을 이용해서 사원의 이름과 그 사원의 매니저 이름을 출력하세요
--힌트) EMPLOYEES 테이블과 EMPLOYEES 테이블을 조인하세요.
SELECT E.FIRST_NAME "사원 이름", M.FIRST_NAME "매니저 이름"
FROM EMPLOYEES E
LEFT JOIN EMPLOYEES M
ON E.MANAGER_ID = M.EMPLOYEE_ID;

--문제 11. 
--EMPLOYEES 테이블에서 left join하여 관리자(매니저)와, 매니저의 이름, 매니저의 급여 까지 출력하세요
--조건) 매니저 아이디가 없는 사람은 배제하고 급여는 역순으로 출력하세요
SELECT E.FIRST_NAME "사원 이름", M.FIRST_NAME "매니저 이름", M.SALARY "매니저 급여"
FROM EMPLOYEES E
LEFT JOIN EMPLOYEES M
ON E.MANAGER_ID = M.EMPLOYEE_ID
WHERE E.MANAGER_ID IS NOT NULL --INNER JOIN과 동일
ORDER BY M.SALARY DESC;

--보너스 문제 12.
--윌리엄스미스(William smith)의 직급도(상급자)를 구하세요.
SELECT M2.FIRST_NAME || ' > ' || M.FIRST_NAME || ' > ' || E.FIRST_NAME 계급
FROM EMPLOYEES E
LEFT JOIN EMPLOYEES M
ON E.MANAGER_ID = M.EMPLOYEE_ID
LEFT JOIN EMPLOYEES M2
ON M.MANAGER_ID = M2.EMPLOYEE_ID
WHERE E.FIRST_NAME='William'
    AND E.LAST_NAME='Smith';

-----------------------------------------------------------
-- 오라클 조인 - 오라클에서만 사용할 수 있고, 조인할 테이블을 FROM에 씁니다. 조인조건을 WHERE에 씁니다.
-- 오라클 INNER JOIN
SELECT *
FROM INFO I, AUTH A
WHERE I.AUTH_ID = A.AUTH_ID;

-- 오라클 LEFT JOIN
SELECT *
FROM INFO I, AUTH A
WHERE I.AUTH_ID = A.AUTH_ID(+); -- 붙일 테이블에 +

-- 오라클 RIGHT JOIN
SELECT *
FROM INFO I, AUTH A
WHERE I.AUTH_ID (+) = A.AUTH_ID;

-- 오라클 FULL OUTER JOIN은 없음

-- 크로스조인은 잘못된 조인(조인 조건을 안적엇을 때 나타남)
SELECT *
FROM INFO I, AUTH A;